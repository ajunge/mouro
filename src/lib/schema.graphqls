type Query {
    # Return identity for the API token issuer
    me: Identity! 

    # Return an edge by hash
    edgeByHash(hash: ID!): Edge

}

#Identity type.
type Identity {
    # Decentralized Identifier (DID) of the Identity
    did: String!
}

scalar Date

type Edge {
    # blake2b hash of the JWT
    hash: ID!
    # original JWT of the edge
    jwt: String!
    # from field of the edge. "iss" on the JWT
    from: Identity!
    # to field of the edge. "sub" on the JWT
    to: Identity!
    # type of the edge. "type" on the JWT
    type: String!
    # date of the issuance of the edge. "iat" on the JWT
    time: Date!
    # tag of the edge. "tag" on the JWT
    tag: String
    # unencrypted data of the edge. "claim" on the JWT
    claim: String
    # personal encrypted data of the edge. "encPriv" on the JWT
    encPriv: String
    # shared encrypted data of the edge. "encShar" on the JWT
    encShar: String
}

type Mutation {
    # Add and edge.
    #
    # Arguments
    #
    # edgeJWT: JWT with the following mandatory fields: iss, sub, type, iat. Optional: tag,claim,encPriv,encShar
    addEdge(edgeJWT: String): Edge
}